image:
  # image.repository -- The image of the commento container.
  repository: registry.gitlab.com/commento/commento
  # image.tag -- The image tag.
  tag: v1.8.0
  pullPolicy: IfNotPresent

# originUrl -- COMMENTO_ORIGIN
# This should be set to the subdomain or the IP address hosting Commento
# All API requests will go to this server. This may include subdirectories
# if Commento is hosted behind a reverse proxy, for example.
# Include the protocol in the value to use HTTP/HTTPS.
# E.g. http://commento.example.com
originUrl: ''

# resources -- Pod resources
resources:
  limits:
    cpu: 200m
    memory: 256Mi
  requests:
    cpu: 100m
    memory: 128Mi

# podAnnotations -- K8S Pod annotations
podAnnotations:

# extraEnvs -- Extra environments
extraEnvs: []

# existingSecret -- Existing secret to use for PostgreSQL passwords
existingSecret:

# dashboardRegistration -- Used to disable new dashboard registrations
dashboardRegistration: true

# smtp -- SMTP credentials and configuration the server should use to send emails.
# By default, all settings are empty and email features such as email
# notification and reset password are turned off.
smtp:
  host:
  port:
  username:
  password:
  fromAddress:

# akismetKey -- Akismet API key.
# Create a key in your Akismet dashboard <https://akismet.com/account/>.
# By default, Akismet integration is turned off when this value is left empty.
akismetKey:

# googleOAuth -- Google OAuth configuration
# Create a new project in the Google developer console
# to generate a set of credentials: https://console.developers.google.com/project
googleOAuth:
  enabled: false
  key:
  secret:

# githubOAuth -- GitHub OAuth configuration.
# Create a new OAuth app in GitHub developer settings
# to generate a set of credentials: https://github.com/settings/developers
githubOAuth:
  enabled: false
  key:
  secret:

# gitlabOAuth -- Gitlab OAuth configuration.
# Create a new application in your GitLab settings
# to generate a set of credentials: https://gitlab.com/profile/applications
gitlabOAuth:
  enabled: false
  key:
  secret:

# twitterOAuth -- Twitter OAuth configuration.
# Create an app in the Twitter developer dashboard
# to generate a set of credentials: https://developer.twitter.com/en/apps
twitterOAuth:
  enabled: false
  key:
  secret:

cdn:
  # cdn.enabled -- Enable CDN. Useful if you'd like to use a CDN with Commento
  enabled: false
  # cdn.cdnPrefix -- CDN Prefix, e.g. cdnPrefix: http://d111111abcdef8.cloudfront.net
  cdnPrefix:

# Parameters of the PostgreSQL chart: https://hub.helm.sh/charts/bitnami/postgresql
postgresql:
  volumePermissions:
    # postgresql.volumePermissions.enabled -- Enable Postgres volumn permissions
    enabled: false
  replication:
    # postgresql.replication.enabled -- Enable Postgres replication
    enabled: false
  persistence:
    # postgresql.replication.enabled -- Enable Postgres persistence
    enabled: false

  # postgresql.postgresqlUsername -- Postgres username
  postgresqlUsername: postgres

  # postgresql.postgresqlPassword -- Postgres password
  # WARNING: you should NOT use this, instead specify `postgresql.existingSecret`
  postgresqlPassword: commento

  # postgresql.postgresqlDatabase -- Postgres database name
  postgresqlDatabase: commento

  # postgresql.existingSecret -- This existing secret to use for PostgreSQL passwords
  existingSecret:

  # postgresql.extraEnv -- Extra envs for postgres
  extraEnv: []
  # postgresql.extraEnvVarsCM -- Extra env configmap for postgres
  extraEnvVarsCM:

service:
  type: ClusterIP
  port: 8080

# Ingress config
ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# Define nodeSelector, affinity, tolerations
nodeSelector: {}
affinity: {}
tolerations: {}
