# Default values for clickhouse-keeper.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: clickhouse/clickhouse-keeper
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "head-alpine"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

keeperConfig: |
  <clickhouse>
      <include_from>/tmp/clickhouse-keeper/config.d/generated-keeper-settings.xml</include_from>
      <logger>
          <level>trace</level>
          <console>true</console>
      </logger>
      <listen_host>0.0.0.0</listen_host>
      <keeper_server incl="keeper_server">
          <path>/var/lib/clickhouse-keeper</path>
          <tcp_port>2181</tcp_port>
          <four_letter_word_white_list>*</four_letter_word_white_list>
          <coordination_settings>
              <!-- <raft_logs_level>trace</raft_logs_level> -->
              <raft_logs_level>information</raft_logs_level>
          </coordination_settings>
      </keeper_server>
      <prometheus>
          <endpoint>/metrics</endpoint>
          <port>7000</port>
          <metrics>true</metrics>
          <events>true</events>
          <asynchronous_metrics>true</asynchronous_metrics>
          <!-- https://github.com/ClickHouse/ClickHouse/issues/46136 -->
          <status_info>false</status_info>
      </prometheus>
  </clickhouse>

command: |
  HOST=`hostname -s` &&
  DOMAIN=`hostname -d` &&
  if [[ $HOST =~ (.*)-([0-9]+)$ ]]; then
      NAME=${BASH_REMATCH[1]}
      ORD=${BASH_REMATCH[2]}
  else
      echo "Failed to parse name and ordinal of Pod"
      exit 1
  fi &&
  export MY_ID=$((ORD+1)) &&
  mkdir -p /tmp/clickhouse-keeper/config.d/ &&
  {
    echo "<yandex><keeper_server>"
    echo "<server_id>${MY_ID}</server_id>"
    echo "<raft_configuration>"
    for (( i=1; i<=$SERVERS; i++ )); do
        echo "<server><id>${i}</id><hostname>$NAME-$((i-1)).${DOMAIN}</hostname><port>${RAFT_PORT}</port></server>"
    done
    echo "</raft_configuration>"
    echo "</keeper_server></yandex>"
  } > /tmp/clickhouse-keeper/config.d/generated-keeper-settings.xml &&
  cat /tmp/clickhouse-keeper/config.d/generated-keeper-settings.xml &&
  if [[ "1" == "$MY_ID" ]]; then
    clickhouse-keeper --config-file=/etc/clickhouse-keeper/keeper_config.xml --force-recovery
  else
    clickhouse-keeper --config-file=/etc/clickhouse-keeper/keeper_config.xml
  fi


livenessProbe:
  exec:
    command:
      - bash
      - -xc
      - 'date && OK=$(exec 3<>/dev/tcp/127.0.0.1/2181 ; printf "ruok" >&3 ; IFS=; tee <&3; exec 3<&- ;); if [[ "$OK" == "imok" ]]; then exit 0; else exit 1; fi'
  initialDelaySeconds: 20
  timeoutSeconds: 15

persistence:
  ## persistence.persistence.enabled -- enabling persistence
  ##
  enabled: false
  ## persistence.persistence.size -- Volume size
  ##
  size: 25Gi
  ##
  accessMode: ReadWriteOnce
  ## persistence.persistence.storageClass -- Storage class for PV (e.g. gp2, standard, ...)
  ##
  storageClass: ""
  ## @param persistence.existingClaim The name of an existing PVC to use for persistence
  ##
  existingClaim: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 7000

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
