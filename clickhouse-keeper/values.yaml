# Default values for clickhouse-keeper.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 3

image:
  repository: clickhouse/clickhouse-keeper
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: 'head-alpine'

imagePullSecrets: []
nameOverride: ''
fullnameOverride: ''

keeperConfig: |
  <clickhouse>
      <include_from>/tmp/clickhouse-keeper/config.d/generated-keeper-settings.xml</include_from>
      <logger>
          <level>trace</level>
          <console>true</console>
      </logger>
      <listen_host>0.0.0.0</listen_host>
      <keeper_server incl="keeper_server">
          <enable_reconfiguration>true</enable_reconfiguration>
          <path>/var/lib/clickhouse-keeper</path>
          <tcp_port>2181</tcp_port>
          <four_letter_word_white_list>*</four_letter_word_white_list>
          <coordination_settings>
              <!-- <raft_logs_level>trace</raft_logs_level> -->
              <raft_logs_level>information</raft_logs_level>
          </coordination_settings>
      </keeper_server>
      <prometheus>
          <endpoint>/metrics</endpoint>
          <port>7000</port>
          <metrics>true</metrics>
          <events>true</events>
          <asynchronous_metrics>true</asynchronous_metrics>
          <status_info>true</status_info>
      </prometheus>
  </clickhouse>

env: |
  #!/usr/bin/env bash
  export DOMAIN=`hostname -d`
  export CLIENT_HOST=clickhouse-keeper
  export CLIENT_PORT=2181
  export RAFT_PORT=9444

livenessProbe:
  exec:
    command:
      - /conf/keeperLive.sh
    failureThreshold: 3
    initialDelaySeconds: 60
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 10

readinessProbe:
  exec:
    command:
      - /conf/keeperReady.sh
  failureThreshold: 3
  initialDelaySeconds: 10
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 20

persistence:
  ## persistence.persistence.enabled -- enabling persistence
  ##
  enabled: true
  ## persistence.persistence.size -- Volume size
  ##
  size: 10Gi
  ##
  accessMode: ReadWriteOnce
  ## persistence.persistence.storageClass -- Storage class for PV (e.g. gp2, standard, ...)
  ##
  storageClass: ''
  ## @param persistence.existingClaim The name of an existing PVC to use for persistence
  ##
  existingClaim: ''

podAnnotations: {}
podLabels: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 7000

ingress:
  enabled: false
  className: ''
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
